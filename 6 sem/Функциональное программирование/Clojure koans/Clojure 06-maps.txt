(ns koans.06-maps
  (:require [koan-engine.core :refer :all]))
---------------------------------------------------------------------------
===========================================================================
(meditations
  "Don't get lost when creating a map"
  (= {:a 1 :b 2} (hash-map :a 1 __ __))
===========================================================================
user=> (= {:a 1 :b 2} (hash-map :a 1 :b 2))
true

===========================================================================
  "A value must be supplied for each key"
  (= {:a 1} (hash-map :a __))
===========================================================================
user=>  (= {:a 1} (hash-map :a 1))
true

===========================================================================
  "The size is the number of entries"
  (= __ (count {:a 1 :b 2}))
===========================================================================
user=> (= 2 (count {:a 1 :b 2}))
true

===========================================================================
  "You can look up the value for a given key"
  (= __ (get {:a 1 :b 2} :b))
===========================================================================
user=> (= 2 (get {:a 1 :b 2} :b))
true

===========================================================================
  "Maps can be used as functions to do lookups"
  (= __ ({:a 1 :b 2} :a))
===========================================================================
user=> (= 1 ({:a 1 :b 2} :a))
true

===========================================================================
  "And so can keywords"
  (= __ (:a {:a 1 :b 2}))
===========================================================================
user=> (= 1 (:a {:a 1 :b 2}))
true

===========================================================================
  "But map keys need not be keywords"
  (= __ ({2010 "Vancouver" 2014 "Sochi" 2018 "PyeongChang"} 2014))
===========================================================================
user=> (= "Sochi" ({2010 "Vancouver" 2014 "Sochi" 2018 "PyeongChang"} 2014))
true

===========================================================================
  "You may not be able to find an entry for a key"
  (= __ (get {:a 1 :b 2} :c))
===========================================================================
user=> (= nil (get {:a 1 :b 2} :c))
true

===========================================================================
  "But you can provide your own default"
  (= __ (get {:a 1 :b 2} :c :key-not-found))
===========================================================================
user=> (= :key-not-found (get {:a 1 :b 2} :c :key-not-found))
true

===========================================================================
  "You can find out if a key is present"
  (= __ (contains? {:a nil :b nil} :b))
===========================================================================
(= true (contains? {:a nil :b nil} :b))
true

===========================================================================
  "Or if it is missing"
  (= __ (contains? {:a nil :b nil} :c))
===========================================================================
user=> (= false (contains? {:a nil :b nil} :c))
true

===========================================================================
  "Maps are immutable, but you can create a new and improved version"
  (= {1 "January" 2 __} (assoc {1 "January"} 2 "February"))
===========================================================================
user=> (= {1 "January" 2 "February"} (assoc {1 "January"} 2 "February"))
true

===========================================================================
  "You can also create a new version with an entry removed"
  (= {__ __} (dissoc {1 "January" 2 "February"} 2))
===========================================================================
user=> (= {1 "January"} (dissoc {1 "January" 2 "February"} 2))
true

===========================================================================
  "Create a new map by merging"
  (= {:a 1 :b 2 __ __} (merge {:a 1 :b 2} {:c 3}))
===========================================================================
user=> (= {:a 1 :b 2 :c 3} (merge {:a 1 :b 2} {:c 3}))
true

===========================================================================
  "Specify how to handle entries with same keys when merging"
  (= {:a 1 :b __ :c 3} (merge-with + {:a 1 :b 1} {:b 1 :c 3}))
===========================================================================
user=> (= {:a 1 :b 2 :c 3} (merge-with + {:a 1 :b 1} {:b 1 :c 3}))
true

===========================================================================
  "Often you will need to get the keys, but the order is undependable"
  (= (list __ __ __)
     (sort (keys { 2014 "Sochi" 2018 "PyeongChang" 2010 "Vancouver"})))
===========================================================================
user=>   (= (list 2010 2014 2018)
     (sort (keys { 2014 "Sochi" 2018 "PyeongChang" 2010 "Vancouver"})))
true

===========================================================================
  "You can get the values in a similar way"
  (= (list __ __ __)
     (sort (vals {2010 "Vancouver" 2014 "Sochi" 2018 "PyeongChang"})))
===========================================================================
user=> (= (list "PyeongChang" "Sochi" "Vancouver")
     (sort (vals {2010 "Vancouver" 2014 "Sochi" 2018 "PyeongChang"})))
true

===========================================================================
  "You can even iterate over the map entries as a seq"
(:require [koan-engine.core :refer :all])  
(= {:a 1 :b 1}
     (into {}
           (map
            (fn [[k v]] [k (inc v)])
            {:a 1 :b 2}))))
===========================================================================
user=> (= {:a 2 :b 3}
   (into {}
         (map
             (fn [[k v]] [k (inc v)])
             {:a 1 :b 2})))
true

