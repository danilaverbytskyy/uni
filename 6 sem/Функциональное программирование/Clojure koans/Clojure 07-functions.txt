(ns koans.07-functions
  (:require [koan-engine.core :refer :all]))

(defn multiply-by-ten [n]
  (* 10 n))

(defn square [n] (* n n))

(meditations
---------------------------------------------------------------------------
===========================================================================
  "Calling a function is like giving it a hug with parentheses"
  (= __ (square 9))
===========================================================================
user=> (defn square [n] (* n n))   (= 81 (square 9))
#'user/square
true

===========================================================================
  "Functions are usually defined before they are used"
  (= __ (multiply-by-ten 2))
===========================================================================
user=> (defn multiply-by-ten [n]  (* 10 n))  (= 20 (multiply-by-ten 2))
#'user/multiply-by-ten
true

===========================================================================
  "But they can also be defined inline"
  (= __ ((fn [n] (* 5 n)) 2))
===========================================================================
user=> (= 10 ((fn [n] (* 5 n)) 2))
true

===========================================================================
  "Or using an even shorter syntax"
  (= __ (#(* 15 %) 4))
===========================================================================
user=> (= 60 (#(* 15 %) 4))
true

===========================================================================
  "Even anonymous functions may take multiple arguments"
  (= __ (#(+ %1 %2 %3) 4 5 6))
===========================================================================
user=> (= 15 (#(+ %1 %2 %3) 4 5 6))
true

===========================================================================
  "Arguments can also be skipped"
  (= __ (#(str "AA" %2) "bb" "CC"))
===========================================================================
user=> (= "AACC" (#(str "AA" %2) "bb" "CC"))
true

===========================================================================
  "One function can beget another"
  (= 9 (((fn [] ___)) 4 5))
===========================================================================
user=> (= 9 (((fn [] +)) 4 5))
true

===========================================================================
  "Functions can also take other functions as input"
  (= 20 ((fn [f] (f 4 5))
           ___))
===========================================================================
user=>  (= 20 ((fn [f] (f 4 5))*))
true

===========================================================================
  "Higher-order functions take function arguments"
  (= 25 (___
          (fn [n] (* n n))))
===========================================================================
user=> (= 25 ((fn [f] (f 5)) (fn [n] (* n n))))
true

===========================================================================
  "But they are often better written using the names of functions"
  (= 25 (___ square)))
===========================================================================
(defn square [n] (* n n)) (= 25 ((fn [f] (f 5)) square))
#'user/square
true