(ns koans.08-conditionals
  (:require [koan-engine.core :refer :all]))

(defn explain-exercise-velocity [exercise-term]
  (case exercise-term
        :bicycling        "pretty fast"
        :jogging          "not super fast"
        :walking          "not fast at all"
        "is that even exercise?"))

(meditations
---------------------------------------------------------------------------
===========================================================================
  "You will face many decisions"
  (= __ (if (false? (= 4 5))
          :a
          :b))
===========================================================================
user=>   (= :a (if (false? (= 4 5))
          :a
          :b))
true


===========================================================================
  "Some of them leave you no alternative"
  (= __ (if (> 4 3)
          []))
===========================================================================
user=> (= [] (if (> 4 3)
          []))
true


===========================================================================
  "And in such a situation you may have nothing"
  (= __ (if (nil? 0)
          [:a :b :c]))
===========================================================================
user=> (= nil (if (nil? 0)
          [:a :b :c]))
true


===========================================================================
  "In others your alternative may be interesting"
  (= :glory (if (not (empty? ()))
              :doom
              __))
===========================================================================
user=> (= :glory (if (not (empty? ()))
              :doom
              :glory))
true


===========================================================================
  "You may have a multitude of possible paths"
  (let [x 5]
    (= :your-road (cond (= x __) :road-not-taken
                        (= x __) :another-road-not-taken
                        :else __)))
===========================================================================
user=>   (let [x 5]
    (= :your-road (cond (= x 42) :road-not-taken
                        (= x 197) :another-road-not-taken
                        :else :your-road)))
true


===========================================================================
  "Or your fate may be sealed"
  (= 'doom (if-not (zero? __)
          'doom
          'more-doom))
===========================================================================
user=> (= 'doom (if-not (zero? 42)
          'doom
          'more-doom))
true


===========================================================================
  "In case of emergency, go fast"
  (= "pretty fast"
     (explain-exercise-velocity __))
===========================================================================
user=> (defn explain-exercise-velocity [exercise-term]
  (case exercise-term
        :bicycling        "pretty fast"
        :jogging          "not super fast"
        :walking          "not fast at all"
        "is that even exercise?"))

       (= "pretty fast"
     (explain-exercise-velocity :bicycling))
#'user/explain-exercise-velocity
true


===========================================================================
  "But admit it when you don't know what to do"
  (= __
     (explain-exercise-velocity :watching-tv)))
===========================================================================
user=> (defn explain-exercise-velocity [exercise-term]
  (case exercise-term
        :bicycling        "pretty fast"
        :jogging          "not super fast"
        :walking          "not fast at all"
        "is that even exercise?"))

       (= "is that even exercise?"
     (explain-exercise-velocity :watching-tv)))  
#'user/explain-exercise-velocity
true