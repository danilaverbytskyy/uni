(ns koans.15-destructuring
  (:require [koan-engine.core :refer :all]))

(def test-address
  {:street-address "123 Test Lane"
   :city "Testerville"
   :state "TX"})

(meditations
---------------------------------------------------------------------------
===========================================================================
  "Destructuring is an arbiter: it breaks up arguments"
  (= __ ((fn [[a b]] (str b a))
         [:foo :bar]))
===========================================================================
user=>   (= ":bar:foo" ((fn [[a b]] (str b a))
         [:foo :bar]))
true


===========================================================================
  "Whether in function definitions"
  (= (str "An Oxford comma list of apples, "
          "oranges, "
          "and pears.")
     ((fn [[a b c]] __)
      ["apples" "oranges" "pears"]))
===========================================================================
user=> (= (str "An Oxford comma list of apples, "
          "oranges, "
          "and pears.")
       ((fn [[a b c]] (str "An Oxford comma list of " a ", " b ", and " c "."))
       ["apples" "oranges" "pears"]))
true


===========================================================================
  "Or in let expressions"
  (= "Rich Hickey aka The Clojurer aka Go Time aka Lambda Guru"
     (let [[first-name last-name & aliases]
           (list "Rich" "Hickey" "The Clojurer" "Go Time" "Lambda Guru")]
       __))
===========================================================================
user=> (= "Rich Hickey aka The Clojurer aka Go Time aka Lambda Guru"
       (let [[first-name last-name & aliases]
           (list "Rich" "Hickey" "The Clojurer" "Go Time" "Lambda Guru")]
       (str first-name " " last-name " aka "(clojure.string/join " aka "
         aliases))))
true


===========================================================================
  "You can regain the full argument if you like arguing"
  (= {:original-parts ["Stephen" "Hawking"] :named-parts 
{:first "Stephen" :last "Hawking"}}
     (let [[first-name last-name :as full-name] ["Stephen" "Hawking"]]
       __))
===========================================================================
user=> (= {:original-parts ["Stephen" "Hawking"] :named-parts 
       {:first "Stephen" :last "Hawking"}}
           (let [[first-name last-name :as full-name] ["Stephen" "Hawking"]]
       {:original-parts [(first full-name) (second full-name)]
        :named-parts {:first first-name :last last-name}}))
true

===========================================================================
  "Break up maps by keys"
  (= "123 Test Lane, Testerville, TX"
     (let [{street-address :street-address, city :city, state :state} test-address]
       __))
===========================================================================
user=> (def test-address
{:street-address "123 Test Lane"
   :city "Testerville"
   :state "TX"})
  (= "123 Test Lane, Testerville, TX"
     (let [{street-address :street-address, city :city, state :state} test-address]
       (str street-address ", " city ", "state)))  
#'user/test-address
true


===========================================================================
  "Or more succinctly"
  (= "123 Test Lane, Testerville, TX"
     (let [{:keys [street-address __ __]} test-address]
       __))
===========================================================================
user=> (def test-address
{:street-address "123 Test Lane"
   :city "Testerville"
   :state "TX"})
(= "123 Test Lane, Testerville, TX"
     (let [{:keys [street-address city state]} test-address]
       (str street-address ", " city ", "state)))
#'user/test-address
true


===========================================================================
  "All together now!"
  (= "Test Testerson, 123 Test Lane, Testerville, TX"
     (___ ["Test" "Testerson"] test-address)))
===========================================================================
user=> (def test-address
{:street-address "123 Test Lane"
   :city "Testerville"
   :state "TX"})
(= "Test Testerson, 123 Test Lane, Testerville, TX"
     ((fn [[first last] {:keys [street-address city state]}]
        (str first " " last ", " street-address ", " city ", " state))
 ["Test" "Testerson"] test-address)))
#'user/test-address
true
